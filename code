// Define types for graph nodes and output structure
interface GraphNode {
  id: string;
  title: string;
  // Optional color â€“ can be extended if input later includes color info
  color?: string;
  marker: {
    radius: number;
    lineWidth: number;
    lineColor: string;
  };
}

interface GraphData {
  data: [string, string][];
  nodes: GraphNode[];
}

// Define types for the input JSON structure (only required fields are included)
interface InstalledChild {
  key: string;
  version: string;
  // additional fields omitted...
}

interface UpgradeChild {
  version: string;
  hotFixes?: { version: string }[];
  // additional fields omitted...
}

interface MigrationChild {
  version: string;
  // additional fields omitted...
}

interface InputJSON {
  installed: {
    installedExpVersion: string;
    child: {
      installedChild: InstalledChild[];
      upgradeChild?: any[];
      migrationChild?: any[];
    };
  };
  upgrade: {
    version: string;
    child: UpgradeChild[];
  };
  migration: {
    version: string;
    child: MigrationChild[];
  };
}

/**
 * Dynamically extracts graph nodes and edges from the input JSON.
 * All version values are plucked directly from the input; no static values are used.
 *
 * Rules:
 * - Main nodes:  
 *     installed: input.installed.installedExpVersion  
 *     upgrade: input.upgrade.version  
 *     migration: input.migration.version  
 *   (Chain edges are created between these main nodes.)
 *
 * - For each installed child node, use its version value as node id/title and add an edge
 *   from the installed main node.
 *
 * - For each upgrade child node, use its version value as node id/title and add an edge
 *   from the upgrade main node. If hotFixes are present, each hotfix is added as a node
 *   (using its version) with an edge from the upgrade child node.
 *
 * - For each migration child node, use its version value as node id/title and add an edge
 *   from the migration main node.
 *
 * @param input - The input JSON object.
 * @returns GraphData containing nodes and edges.
 */
function extractGraphData(input: InputJSON): GraphData {
  const result: GraphData = { data: [], nodes: [] };

  // Default marker styles for main nodes and child nodes.
  // These can later be made configurable.
  const defaultMainMarker = { radius: 40, lineWidth: 2, lineColor: "black" };
  const defaultChildMarker = { radius: 30, lineWidth: 2, lineColor: "blue" };

  // Helper function to add a node only if it doesn't already exist.
  function addNode(node: GraphNode) {
    if (!result.nodes.find((n) => n.id === node.id)) {
      result.nodes.push(node);
    }
  }

  // --- Process Main Nodes ---
  // Pluck main node version values from the input.
  const installedMain = input.installed.installedExpVersion;
  const upgradeMain = input.upgrade.version;
  const migrationMain = input.migration.version;

  // Add main nodes using the plucked version values.
  addNode({ id: installedMain, title: installedMain, marker: defaultMainMarker });
  addNode({ id: upgradeMain, title: upgradeMain, marker: defaultMainMarker });
  addNode({ id: migrationMain, title: migrationMain, marker: defaultMainMarker });

  // Create chain edges between main nodes.
  result.data.push([installedMain, upgradeMain]);
  result.data.push([upgradeMain, migrationMain]);

  // --- Process Installed Child Nodes ---
  input.installed.child.installedChild.forEach((child) => {
    const childId = child.version;
    addNode({ id: childId, title: child.version, marker: defaultChildMarker });
    // Create an edge from the installed main node to this child node.
    result.data.push([installedMain, childId]);
  });

  // --- Process Upgrade Child Nodes ---
  input.upgrade.child.forEach((child) => {
    const childId = child.version;
    addNode({ id: childId, title: child.version, marker: defaultChildMarker });
    // Edge from upgrade main node to the upgrade child node.
    result.data.push([upgradeMain, childId]);

    // Process hotfixes if they exist.
    if (child.hotFixes && Array.isArray(child.hotFixes)) {
      child.hotFixes.forEach((hotfix) => {
        const hotfixId = hotfix.version;
        addNode({ id: hotfixId, title: hotfix.version, marker: defaultChildMarker });
        // Edge from the upgrade child node to the hotfix node.
        result.data.push([childId, hotfixId]);
      });
    }
  });

  // --- Process Migration Child Nodes ---
  input.migration.child.forEach((child) => {
    const childId = child.version;
    addNode({ id: childId, title: child.version, marker: defaultChildMarker });
    // Edge from migration main node to the migration child node.
    result.data.push([migrationMain, childId]);
  });

  return result;
}
